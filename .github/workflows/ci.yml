name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        deno: [canary]
        os:
          - ${{ github.repository_owner == 'denoland' && 'ubuntu-20.04-xl' || 'ubuntu-22.04' }}
          - windows-2022
          - macOS-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno }}

      - name: Run tests canary
        run: deno task test

      - name: Type check browser compatible modules
        shell: bash
        run: deno task test:browser

      - name: Generate lcov
        shell: bash
        # excludes tests, testdata, and generated sources from coverage report
        run: |
          deno coverage ./cov/ --lcov --exclude="test\\.(ts|js)|wasm\\.js|testdata|node/_tools|node/_module/cjs|node_modules" > cov.lcov

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: |
          !startsWith(matrix.os, 'ubuntu')
        with:
          name: ${{ matrix.os }}-${{ matrix.deno }}
          files: cov.lcov

      - name: Remove coverage report
        shell: bash
        if: |
          !startsWith(matrix.os, 'ubuntu')
        run: |
          rm -rf ./cov/
          rm cov.lcov

      - name: Release if version change
        if: |
          startsWith(matrix.os, 'ubuntu') &&
          github.repository == 'denoland/deno_std' &&
          github.ref == 'refs/heads/main'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.DENOBOT_PAT }}
        run: ./_tools/release/03_release.ts

  node:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        deno: [canary]
        os:
          - ${{ github.repository_owner == 'denoland' && 'ubuntu-20.04-xl' || 'ubuntu-22.04' }}
          - windows-2022
          - macOS-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: true
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno }}

      - name: Type check node modules
        shell: bash
        run: deno task node:check-unstable-api

      - name: Unit test node/
        run: deno task node:unit

      - name: Run Node tests canary
        run: deno task node:test
        env:
          DENO_NODE_COMPAT_URL: file:///${{ github.workspace }}/

  lint:
    runs-on: ${{ github.repository_owner == 'denoland' && 'ubuntu-20.04-xl' || 'ubuntu-22.04' }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: false
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: canary

      - name: Format
        run: deno fmt --check

      - name: Lint
        run: deno lint

      - name: Check circular dependencies
        run: "deno task node:lint-circular-deps"

      - name: Check License headers
        run: deno task fmt:licence-headers --check

      - name: Check Deprecations
        run: "deno task lint:deprecations"

      - name: Check Import paths in Docs
        run: "deno task lint:doc-imports"

      - name: Check non-test assertions
        run: deno task lint:check-assertions

  wasm:
    name: wasm
    runs-on: ${{ github.repository_owner == 'denoland' && 'ubuntu-20.04-xl' || 'ubuntu-22.04' }}
    strategy:
      matrix:
        module: [ { name: crypto, path: ./crypto/_wasm }, { name: varint, path: ./encoding/varint/_wasm } ]
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          # required to check for changes
          fetch-depth: 2
          submodules: false
          persist-credentials: false

      - name: Check for changes
        id: source
        run: |-
          set -o errexit
          shopt -s inherit_errexit
          declare modifications="$(git diff --name-only HEAD~ -- ${{ matrix.module.path }})"
          declare modified="$([[ "$modifications" ]] && echo true || echo false)"
          echo "modified=$modified" >> $GITHUB_OUTPUT
          echo "${{ matrix.module.name }} WASM source modified in this commit? $modified"
          echo "$modifications"

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        if: success() && steps.source.outputs.modified == 'true'

      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        if: success() && steps.source.outputs.modified == 'true'
        with:
          # This must match the version in _wasm/rust-toolchain.toml of the module folder
          rust-version: 1.65.0
          targets: wasm32-unknown-unknown
          components: rustfmt
    
      - name: Rebuild Wasm and verify it hasn't changed
        if: success() && steps.source.outputs.modified == 'true'
        run: deno task build:${{ matrix.module.name }} --check
